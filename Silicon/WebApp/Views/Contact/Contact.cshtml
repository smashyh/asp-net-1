@inject IConfiguration configuration
@model ContactViewModel
@{
    ViewData["Title"] = "Contact";

    string? contactResultMessage = ViewData["ContactResultMessage"] as string ?? null;
    bool requestSuccessful = ViewData["ContactResultSuccessful"] is bool success && success;
}

<section class="contact">
    <div class="container">

        <div class="top-section">
            <div class="content">
                <h1>Contact Us</h1>

                <div class="contact-options">

                    <div class="contact-option">
                        <i class="contact-icon fa-regular fa-envelope"></i>
                        <div class="contact-content">
                            <h4>Email us</h4>
                            <p>Please feel free to drop us a line. We will respond as soon as possible.</p>
                            <a href="#" class="contact-link">Leave a message<i class="fa-solid fa-arrow-right" aria-hidden="true"></i></a>
                        </div>
                    </div>

                    <div class="contact-option">
                        <i class="contact-icon fa-regular fa-user-plus"></i>
                        <div class="contact-content">
                            <h4>Careers</h4>
                            <p>Sit ac ipsum leo lorem magna nunc mattis maecenas non vestibulum.</p>
                            <a href="#" class="contact-link">Send an application<i class="fa-solid fa-arrow-right" aria-hidden="true"></i></a>
                        </div>
                    </div>

                </div>
            </div>

            <div class="form">
                <form id="contact-form" method="post" asp-controller="Contact" asp-action="SendContactRequest">
                    <h2>Get In Contact With Us</h2>

                    @{
                        if (contactResultMessage != null)
                        {
                            <div class="@(requestSuccessful ? "message-success" : "message-error") large">
                                @contactResultMessage
                            </div>
                        }
                    }

                    <div class="input-field full-name">
                        <label class="input-label" asp-for="FullName"></label>
                        <input asp-for="FullName" />
                        <span asp-validation-for="FullName"></span>
                    </div>

                    <div class="input-field email-address">
                        <label class="input-label" asp-for="Email"></label>
                        <input asp-for="Email" />
                        <span asp-validation-for="Email"></span>
                    </div>

                    <div class="input-field service">
                        <label class="input-label" asp-for="Service"></label>
                        <input asp-for="Service" class="hidden-input" />
                        
                        <component type="typeof(Dropdown)" render-mode="ServerPrerendered" 
                                   param-DropdownId="@("Services")"
                                   param-AdditionalClasses="@("")"
                                   param-DefaultOption="@("Choose the service you are interested in")"
                                   param-SelectedOption="@(Model?.Service ?? "")"
                                   param-DefaultOptionSelectable="@false"
                                   param-Options="@(ViewData["Services"] as List<string>)?.ToArray()" />
                        <span asp-validation-for="Service"></span>
                    </div>

                    <div class="input-field message">
                        <label class="input-label" asp-for="Message"></label>
                        @Html.TextAreaFor(m => m.Message, new { rows = "12", cols = "5", @name = "Message", @maxlength = "10000" })
                        <span asp-validation-for="Message"></span>
                    </div>

                    <input class="btn-theme-primary submit-form" type="submit" value="Send Contact Request" />
                </form>
            </div>
        </div>
    </div>
    <div id="map"></div>
    <script>
        (g => { var h, a, k, p = "The Google Maps JavaScript API", c = "google", l = "importLibrary", q = "__ib__", m = document, b = window; b = b[c] || (b[c] = {}); var d = b.maps || (b.maps = {}), r = new Set, e = new URLSearchParams, u = () => h || (h = new Promise(async (f, n) => { await (a = m.createElement("script")); e.set("libraries", [...r] + ""); for (k in g) e.set(k.replace(/[A-Z]/g, t => "_" + t[0].toLowerCase()), g[k]); e.set("callback", c + ".maps." + q); a.src = `https://maps.${c}apis.com/maps/api/js?` + e; d[q] = f; a.onerror = () => h = n(Error(p + " could not load.")); a.nonce = m.querySelector("script[nonce]")?.nonce || ""; m.head.append(a) })); d[l] ? console.warn(p + " only loads once. Ignoring:", g) : d[l] = (f, ...n) => r.add(f) && u().then(() => d[l](f, ...n)) })
            ({ key: "@configuration["Api:GoogleMapsApi"]", v: "weekly" });</script>

</section>

<script src="~/js/partials/contact/contact.js" type="module" defer></script>