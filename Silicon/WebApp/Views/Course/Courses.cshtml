@using System.Diagnostics

@model CourseResultViewModel
@{
    string allCategories = "All categories";
}

<section class="courses">
    <div class="container">
        
        <div class="course-header">
            <h1>Courses</h1>

            <form id="filter">
                <component type="typeof(Dropdown)" render-mode="ServerPrerendered" 
                param-DropdownId="@("Categories")"
                param-AdditionalClasses="@("category-selector")"
                param-DefaultOption="@allCategories"
                param-SelectedOption="@Model.Category"
                param-Options="@Model.Categories?.ToArray() ?? null"/>

                <div class="filter-item search-bar">
                    <div class="search-content">
                        <input id="search-field" type="text" placeholder="Search courses" value="@Model.SearchQuery" />
                        <button id="submit-search"><i class="fa-solid fa-magnifying-glass"></i></button>
                    </div>
                </div>
                
            </form>
        </div>

        <div class="course-list">
            @if (Model.Courses != null && Model.Courses.Count() > 0)
            {
                @foreach (var course in Model.Courses)
                {
                    <a href="/courses/@(course.Id)" class="course-item">
                        <div class="course-thumbnail" style="background-image: url('@course.CourseThumbnailImageUrl'); background-repeat: no-repeat; background-size: 100% 100%;">
                            <div class="overlapping-elements">
                                <div class="badges">
                                    @foreach (var badge in course.CourseBadges)
                                    {
                                        if (badge.Important)
                                        {
                                            <p style="background-color: @badge.BackgroundColorStyling; color: @badge.ColorStyling;">@badge.BadgeLabel</p>
                                        }
                                    }
                                </div>

                                <div class="bookmark">
                                    <div class="wrap">
                                        <i class="fa-regular fa-bookmark"></i>
                                        <i class="solid fa-solid fa-bookmark"></i>

                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="course-info">
                            <div class="course-top-info">
                                <h5>@course.CourseName</h5>
                                <p>By @course.CourseCreator.FirstName @course.CourseCreator.LastName</p>
                                <div class="prices @(course.DiscountPrice != null ? "on-discount" : "")"><h6>$@string.Format("{0:0.00}", course.DiscountPrice != null ? course.DiscountPrice : course.Price)</h6> <p class="discount"><s>$@(string.Format("{0:0.00}", course.Price))</s></p></div>
                            </div>

                            <div class="course-bottom-info">
                                <div class="bottom-info-item"><i class="fa-regular fa-clock"></i>@course.CourseLengthHours hours</div>
                                <div class="bottom-info-item"><i class="fa-regular fa-thumbs-up"></i>@(string.Format("{0:0}", (course.AverageRating / 5.0m) * 100))% (@course.LikeCount.ToStringWithSuffix())</div>
                            </div>

                        </div>
                    </a>
                }
            }
            else
            {
                <p class="no-results">Your search did not yield any results.</p>
            }
        </div>

        <div class="pagination" data-page="@Model.CurrentPage">
            @if (Model.TotalPageCount > 0 /*&& Model.CurrentPage == Math.Clamp(Model.CurrentPage, 1, Model.TotalPageCount)*/)
            {
                // Add button to go to previous page. Caps at 1.
                int prevIndex = Math.Max(Model.CurrentPage - 1, 1);
                <a class="btn-pagination" data-page="@prevIndex"><i class="fa-solid fa-chevron-left"></i></a>

                // The max number of pages to show. (@Todo: Should make this a property somewhere.)
                const int maxNums = 5;

                // When current page is in the middle, how many pages to show to the left and the right.
                int oddDivision = maxNums / 2;

                // The default for-loop range, if we're not nearing the first or last page.
                int lowerOffset = Model.CurrentPage - oddDivision;
                int upperOffset = Model.CurrentPage + oddDivision;

                // To make sure we show as close to 'maxNums' pages as possible,
                // we add the amount upperOffset overflows the total page count by to the initial for-loop value,
                // as well as the amount lowerOffset underflows 1 by to the end for-loop value.

                int startValue = (upperOffset > Model.TotalPageCount)
                    ? lowerOffset + Model.TotalPageCount - upperOffset
                    : lowerOffset;

                int endValue = (lowerOffset < 1)
                    ? endValue = upperOffset + 1 - lowerOffset
                    : endValue = upperOffset;

                // Also clamp the values so we don't show page numbers outside the valid range.
                @for (int i = Math.Max(startValue, 1); i <= Math.Min(endValue, Model.TotalPageCount); i++)
                {
                    string btnClass = "btn-pagination" + (i == Model.CurrentPage ? " active" : "");
                    <a class="@btnClass" data-page="@i">@i</a>
                }

                int nextIndex = Math.Min(Model.CurrentPage + 1, Model.TotalPageCount);
                <a class="btn-pagination" data-page="@nextIndex"><i class="fa-solid fa-chevron-right"></i></a>
            }
        </div>

        <div class="job-ad">
            <div class="content">
                <p>Ready to get started?</p>
                <h1>Take Your <span>Skills</span> to the Next Level</h1>
                <a href="#" class="btn-theme-primary">Work with us</a>
            </div>

            <img src="~/images/courses/illustration.svg" alt="ad-image" />
        </div>
    </div>
</section>

<script src="~/js/partials/course/courses.js" defer></script>
